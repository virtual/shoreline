/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@bootstrap-combobox/bootstrap-combobox/js/bootstrap-combobox.js":
/***/ (function(module, exports) {

eval("/* =============================================================\n * bootstrap-combobox.js v1.2.0\n * =============================================================\n * Copyright 2019 Daniel Farrell\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ============================================================ */\n\n(function( $ ) {\n\n \"use strict\";\n\n /* COMBOBOX PUBLIC CLASS DEFINITION\n  * ================================ */\n\n  var hasPopper = typeof Popper !== 'undefined';\n\n  var Combobox = function ( element, options ) {\n    this.options = $.extend({}, $.fn.combobox.defaults, options);\n    this.template = this.options.template || this.template\n    this.$source = $(element);\n    this.$container = this.setup();\n    this.$element = this.$container.find('input[type=text]');\n    this.$target = this.$container.find('input[type=hidden]');\n    this.$button = this.$container.find('.dropdown-toggle');\n    this.$menu = $(this.options.menu).appendTo('body');\n    this.matcher = this.options.matcher || this.matcher;\n    this.sorter = this.options.sorter || this.sorter;\n    this.highlighter = this.options.highlighter || this.highlighter;\n    this.shown = false;\n    this.selected = false;\n    this.renderLimit = this.options.renderLimit || -1;\n    this.clearIfNoMatch = this.options.clearIfNoMatch;\n    this.refresh();\n    this.transferAttributes();\n    this.listen();\n  };\n\n  Combobox.prototype = {\n\n    constructor: Combobox\n\n  , setup: function () {\n      var combobox = $(this.template());\n      this.$source.before(combobox);\n      this.$source.hide();\n      return combobox;\n    }\n\n  , disable: function() {\n      this.$element.prop('disabled', true);\n      this.$button.attr('disabled', true);\n      this.disabled = true;\n      this.$container.addClass('combobox-disabled');\n    }\n\n  , enable: function() {\n      this.$element.prop('disabled', false);\n      this.$button.attr('disabled', false);\n      this.disabled = false;\n      this.$container.removeClass('combobox-disabled');\n    }\n  , parse: function () {\n      var that = this\n        , map = {}\n        , source = []\n        , selected = false\n        , selectedValue = '';\n      this.$source.find('option').each(function() {\n        var option = $(this);\n        if (option.val() === '') {\n          that.options.placeholder = option.text();\n          return;\n        }\n        map[option.text()] = option.val();\n        source.push(option.text());\n        if (option.prop('selected')) {\n          selected = option.text();\n          selectedValue = option.val();\n        }\n      })\n      this.map = map;\n      if (selected) {\n        this.$element.val(selected);\n        this.$target.val(selectedValue);\n        this.$container.addClass('combobox-selected');\n        this.selected = true;\n      }\n      return source;\n    }\n\n  , transferAttributes: function() {\n    this.options.placeholder = this.$source.attr('data-placeholder') || this.options.placeholder\n    if(this.options.appendId !== undefined) {\n    \tthis.$element.attr('id', this.$source.attr('id') + this.options.appendId);\n    }\n    this.$element.attr('placeholder', this.options.placeholder)\n    this.$target.prop('name', this.$source.prop('name'))\n    this.$target.val(this.$source.val())\n    this.$source.removeAttr('name')  // Remove from source otherwise form will pass parameter twice.\n    this.$element.attr('required', this.$source.attr('required'))\n    this.$element.attr('rel', this.$source.attr('rel'))\n    this.$element.attr('title', this.$source.attr('title'))\n    this.$element.attr('class', this.$source.attr('class'))\n    this.$element.attr('tabindex', this.$source.attr('tabindex'))\n    this.$source.removeAttr('tabindex')\n    if (this.$source.attr('disabled')!==undefined)\n      this.disable();\n  }\n\n  , select: function () {\n      var val = this.$menu.find('.active').attr('data-value');\n      this.$element.val(this.updater(val)).trigger('change');\n      this.$target.val(this.map[val]).trigger('change');\n      this.$source.val(this.map[val]).trigger('change');\n      this.$container.addClass('combobox-selected');\n      this.selected = true;\n      return this.hide();\n    }\n\n  , updater: function (item) {\n      return item;\n    }\n\n  , show: function () {\n      var pos = $.extend({}, this.$element.position(), {\n        height: this.$element[0].offsetHeight\n      });\n\n      this.$menu\n        .insertAfter(this.$element)\n        .css({\n          top: pos.top + pos.height\n        , left: pos.left\n        })\n        .show();\n\n      $('.dropdown-menu').on('mousedown', $.proxy(this.scrollSafety, this));\n\n      this.shown = true;\n      return this;\n    }\n\n  , hide: function () {\n      this.$menu.hide();\n      $('.dropdown-menu').off('mousedown', $.proxy(this.scrollSafety, this));\n      this.$element.on('blur', $.proxy(this.blur, this));\n      this.shown = false;\n      return this;\n    }\n\n  , lookup: function (event) {\n      this.query = this.$element.val();\n      return this.process(this.source);\n    }\n\n  , process: function (items) {\n      var that = this;\n\n      items = $.grep(items, function (item) {\n        return that.matcher(item);\n      })\n\n      items = this.sorter(items);\n\n      if (!items.length) {\n        return this.shown ? this.hide() : this;\n      }\n\n      return this.render(items.slice(0, this.options.items)).show();\n    }\n\n  , template: function() {\n      if (this.options.bsVersion == '2') {\n        return '<div class=\"combobox-container\"><input type=\"hidden\" /> <div class=\"input-append\"> <input type=\"text\" autocomplete=\"off\" /> <span class=\"add-on dropdown-toggle\" data-dropdown=\"dropdown\"> <span class=\"caret pulldown\" style=\"vertical-align: middle\"/> <i class=\"icon-remove remove\"/> </span> </div> </div>'\n      } else if (this.options.bsVersion == '3') {\n        return '<div class=\"combobox-container\"> <input type=\"hidden\" /> <div class=\"input-group\"> <input type=\"text\" autocomplete=\"off\" /> <span class=\"input-group-addon dropdown-toggle\" data-dropdown=\"dropdown\"> <span class=\"caret pulldown\" /> <span class=\"glyphicon glyphicon-remove remove\" /> </span> </div> </div>'\n      } else {\n        return '<div class=\"combobox-container\"> <input type=\"hidden\" /> <div class=\"input-group\"> <input type=\"text\" autocomplete=\"off\" />'\n          + '<span class=\"input-group-append\"' + (hasPopper ? ' data-toggle=\"dropdown\" data-reference=\"parent\"' : '') + '>'\n            + '<span class=\"input-group-text dropdown-toggle' + (this.options.iconCaret ? ' custom-icon' : '') + '\">'\n              + (this.options.iconCaret ? '<span class=\"' + this.options.iconCaret + ' pulldown\" />' : '')\n              + (this.options.iconRemove ? '<span class=\"' + this.options.iconRemove + ' remove\" />' : '<span class=\"utf-remove remove\" />')\n            + '</span>'\n          + '</span> </div> </div>';\n      }\n    }\n\n  , matcher: function (item) {\n      return ~item.toLowerCase().indexOf(this.query.toLowerCase());\n    }\n\n  , sorter: function (items) {\n      var beginswith = []\n        , caseSensitive = []\n        , caseInsensitive = []\n        , item;\n\n      while (item = items.shift()) {\n        if (!item.toLowerCase().indexOf(this.query.toLowerCase())) {beginswith.push(item);}\n        else if (~item.indexOf(this.query)) {caseSensitive.push(item);}\n        else {caseInsensitive.push(item);}\n      }\n\n      return beginswith.concat(caseSensitive, caseInsensitive);\n    }\n\n  , highlighter: function (item) {\n      var query = this.query.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n      return item.replace(new RegExp('(' + query + ')', 'ig'), function ($1, match) {\n        return '<strong>' + match + '</strong>';\n      })\n    }\n\n  , render: function (items) {\n      var that = this;\n\n      items = $(items).map(function (i, item) {\n        if(~that.renderLimit && i >= that.renderLimit)\n          return;\n        i = $(that.options.item).attr('data-value', item);\n        i.find('a').html(that.highlighter(item));\n        return i[0];\n      })\n\n      items.first().addClass('active');\n      this.$menu.html(items);\n      return this;\n    }\n\n  , next: function (event) {\n      var active = this.$menu.find('.active').removeClass('active')\n        , next = active.next();\n\n      if (!next.length) {\n        next = $(this.$menu.find('li')[0]);\n      }\n\n      next.addClass('active');\n    }\n\n  , prev: function (event) {\n      var active = this.$menu.find('.active').removeClass('active')\n        , prev = active.prev();\n\n      if (!prev.length) {\n        prev = this.$menu.find('li').last();\n      }\n\n      prev.addClass('active');\n    }\n\n  , toggle: function () {\n    if (!this.disabled) {\n      if (this.$container.hasClass('combobox-selected')) {\n        this.clearTarget();\n        this.triggerChange();\n        this.clearElement();\n      } else {\n        if (this.shown) {\n          this.hide();\n        } else {\n          this.clearElement();\n          this.lookup();\n        }\n      }\n    }\n  }\n\n  , scrollSafety: function(e) {\n      if (e.target.tagName == 'UL') {\n          this.$element.off('blur');\n      }\n  }\n  , clearElement: function () {\n    this.$element.val('').focus();\n  }\n\n  , clearTarget: function () {\n    this.$source.val('');\n    this.$target.val('');\n    this.$container.removeClass('combobox-selected');\n    this.selected = false;\n  }\n\n  , triggerChange: function () {\n    this.$source.trigger('change');\n  }\n\n  , refresh: function () {\n    this.source = this.parse();\n    this.options.items = this.source.length;\n  }\n\n  , listen: function () {\n      this.$element\n        .on('focus',    $.proxy(this.focus, this))\n        .on('blur',     $.proxy(this.blur, this))\n        .on('keypress', $.proxy(this.keypress, this))\n        .on('keyup',    $.proxy(this.keyup, this));\n\n      if (this.eventSupported('keydown')) {\n        this.$element.on('keydown', $.proxy(this.keydown, this));\n      }\n\n      this.$menu\n        .on('click', $.proxy(this.click, this))\n        .on('mouseenter', 'li', $.proxy(this.mouseenter, this))\n        .on('mouseleave', 'li', $.proxy(this.mouseleave, this));\n\n      this.$button\n        .on('click', $.proxy(this.toggle, this));\n    }\n\n  , eventSupported: function(eventName) {\n      var isSupported = eventName in this.$element;\n      if (!isSupported) {\n        this.$element.setAttribute(eventName, 'return;');\n        isSupported = typeof this.$element[eventName] === 'function';\n      }\n      return isSupported;\n    }\n\n  , move: function (e) {\n      if (!this.shown) {return;}\n\n      switch(e.keyCode) {\n        case 9: // tab\n        case 13: // enter\n        case 27: // escape\n          e.preventDefault();\n          break;\n\n        case 38: // up arrow\n          e.preventDefault();\n          this.prev();\n          this.fixMenuScroll();\n          break;\n\n        case 40: // down arrow\n          e.preventDefault();\n          this.next();\n          this.fixMenuScroll();\n          break;\n      }\n\n      e.stopPropagation();\n    }\n\n  , fixMenuScroll: function(){\n      var active = this.$menu.find('.active');\n      if(active.length){\n          var top = active.position().top;\n          var bottom = top + active.height();\n          var scrollTop = this.$menu.scrollTop();\n          var menuHeight = this.$menu.height();\n          if(bottom > menuHeight){\n              this.$menu.scrollTop(scrollTop + bottom - menuHeight);\n          } else if(top < 0){\n              this.$menu.scrollTop(scrollTop + top);\n          }\n      }\n  }\n\n  , keydown: function (e) {\n      this.suppressKeyPressRepeat = ~$.inArray(e.keyCode, [40,38,9,13,27]);\n      this.move(e);\n    }\n\n  , keypress: function (e) {\n      if (this.suppressKeyPressRepeat) {return;}\n      this.move(e);\n    }\n\n  , keyup: function (e) {\n      switch(e.keyCode) {\n        case 40: // down arrow\n         if (!this.shown){\n           this.toggle();\n         }\n         break;\n        case 39: // right arrow\n        case 38: // up arrow\n        case 37: // left arrow\n        case 36: // home\n        case 35: // end\n        case 16: // shift\n        case 17: // ctrl\n        case 18: // alt\n          break;\n\n        case 9: // tab\n        case 13: // enter\n          if (!this.shown) {return;}\n          this.select();\n          break;\n\n        case 27: // escape\n          if (!this.shown) {return;}\n          this.hide();\n          break;\n\n        default:\n          this.clearTarget();\n          this.lookup();\n      }\n\n      e.stopPropagation();\n      e.preventDefault();\n  }\n\n  , focus: function (e) {\n      this.focused = true;\n    }\n\n  , blur: function (e) {\n      var that = this;\n      this.focused = false;\n      var val = this.$element.val();\n      if (!this.selected && val !== '' ) {\n        if(that.clearIfNoMatch)\n          this.$element.val('');\n        this.$source.val('').trigger('change');\n        this.$target.val('').trigger('change');\n      }\n      if (!this.mousedover && this.shown) {setTimeout(function () { that.hide(); }, 200);}\n    }\n\n  , click: function (e) {\n      e.stopPropagation();\n      e.preventDefault();\n      this.select();\n      this.$element.focus();\n    }\n\n  , mouseenter: function (e) {\n      this.mousedover = true;\n      this.$menu.find('.active').removeClass('active');\n      $(e.currentTarget).addClass('active');\n    }\n\n  , mouseleave: function (e) {\n      this.mousedover = false;\n    }\n  };\n\n  /* COMBOBOX PLUGIN DEFINITION\n   * =========================== */\n  $.fn.combobox = function ( option ) {\n    return this.each(function () {\n      var $this = $(this)\n        , data = $this.data('combobox')\n        , options = typeof option == 'object' && option;\n      if(!data) {$this.data('combobox', (data = new Combobox(this, options)));}\n      if (typeof option == 'string') {data[option]();}\n    });\n  };\n\n  $.fn.combobox.defaults = {\n    bsVersion: '4'\n  , menu: '<ul class=\"typeahead typeahead-long dropdown-menu\"></ul>'\n  , item: '<li><a href=\"#\" class=\"dropdown-item\"></a></li>'\n  , iconCaret: undefined\n  , iconRemove: undefined\n  , clearIfNoMatch: true\n  };\n\n  $.fn.combobox.Constructor = Combobox;\n\n}( window.jQuery ));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@bootstrap-combobox/bootstrap-combobox/js/bootstrap-combobox.js\n");

/***/ }),

/***/ "./node_modules/jquery-colorbox/jquery.colorbox.js":
/***/ (function(module, exports) {

eval("/*!\n\tColorbox 1.6.4\n\tlicense: MIT\n\thttp://www.jacklmoore.com/colorbox\n*/\n(function ($, document, window) {\n\tvar\n\t// Default settings object.\n\t// See http://jacklmoore.com/colorbox for details.\n\tdefaults = {\n\t\t// data sources\n\t\thtml: false,\n\t\tphoto: false,\n\t\tiframe: false,\n\t\tinline: false,\n\n\t\t// behavior and appearance\n\t\ttransition: \"elastic\",\n\t\tspeed: 300,\n\t\tfadeOut: 300,\n\t\twidth: false,\n\t\tinitialWidth: \"600\",\n\t\tinnerWidth: false,\n\t\tmaxWidth: false,\n\t\theight: false,\n\t\tinitialHeight: \"450\",\n\t\tinnerHeight: false,\n\t\tmaxHeight: false,\n\t\tscalePhotos: true,\n\t\tscrolling: true,\n\t\topacity: 0.9,\n\t\tpreloading: true,\n\t\tclassName: false,\n\t\toverlayClose: true,\n\t\tescKey: true,\n\t\tarrowKey: true,\n\t\ttop: false,\n\t\tbottom: false,\n\t\tleft: false,\n\t\tright: false,\n\t\tfixed: false,\n\t\tdata: undefined,\n\t\tcloseButton: true,\n\t\tfastIframe: true,\n\t\topen: false,\n\t\treposition: true,\n\t\tloop: true,\n\t\tslideshow: false,\n\t\tslideshowAuto: true,\n\t\tslideshowSpeed: 2500,\n\t\tslideshowStart: \"start slideshow\",\n\t\tslideshowStop: \"stop slideshow\",\n\t\tphotoRegex: /\\.(gif|png|jp(e|g|eg)|bmp|ico|webp|jxr|svg)((#|\\?).*)?$/i,\n\n\t\t// alternate image paths for high-res displays\n\t\tretinaImage: false,\n\t\tretinaUrl: false,\n\t\tretinaSuffix: '@2x.$1',\n\n\t\t// internationalization\n\t\tcurrent: \"image {current} of {total}\",\n\t\tprevious: \"previous\",\n\t\tnext: \"next\",\n\t\tclose: \"close\",\n\t\txhrError: \"This content failed to load.\",\n\t\timgError: \"This image failed to load.\",\n\n\t\t// accessbility\n\t\treturnFocus: true,\n\t\ttrapFocus: true,\n\n\t\t// callbacks\n\t\tonOpen: false,\n\t\tonLoad: false,\n\t\tonComplete: false,\n\t\tonCleanup: false,\n\t\tonClosed: false,\n\n\t\trel: function() {\n\t\t\treturn this.rel;\n\t\t},\n\t\thref: function() {\n\t\t\t// using this.href would give the absolute url, when the href may have been inteded as a selector (e.g. '#container')\n\t\t\treturn $(this).attr('href');\n\t\t},\n\t\ttitle: function() {\n\t\t\treturn this.title;\n\t\t},\n\t\tcreateImg: function() {\n\t\t\tvar img = new Image();\n\t\t\tvar attrs = $(this).data('cbox-img-attrs');\n\n\t\t\tif (typeof attrs === 'object') {\n\t\t\t\t$.each(attrs, function(key, val){\n\t\t\t\t\timg[key] = val;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn img;\n\t\t},\n\t\tcreateIframe: function() {\n\t\t\tvar iframe = document.createElement('iframe');\n\t\t\tvar attrs = $(this).data('cbox-iframe-attrs');\n\n\t\t\tif (typeof attrs === 'object') {\n\t\t\t\t$.each(attrs, function(key, val){\n\t\t\t\t\tiframe[key] = val;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif ('frameBorder' in iframe) {\n\t\t\t\tiframe.frameBorder = 0;\n\t\t\t}\n\t\t\tif ('allowTransparency' in iframe) {\n\t\t\t\tiframe.allowTransparency = \"true\";\n\t\t\t}\n\t\t\tiframe.name = (new Date()).getTime(); // give the iframe a unique name to prevent caching\n\t\t\tiframe.allowFullscreen = true;\n\n\t\t\treturn iframe;\n\t\t}\n\t},\n\n\t// Abstracting the HTML and event identifiers for easy rebranding\n\tcolorbox = 'colorbox',\n\tprefix = 'cbox',\n\tboxElement = prefix + 'Element',\n\n\t// Events\n\tevent_open = prefix + '_open',\n\tevent_load = prefix + '_load',\n\tevent_complete = prefix + '_complete',\n\tevent_cleanup = prefix + '_cleanup',\n\tevent_closed = prefix + '_closed',\n\tevent_purge = prefix + '_purge',\n\n\t// Cached jQuery Object Variables\n\t$overlay,\n\t$box,\n\t$wrap,\n\t$content,\n\t$topBorder,\n\t$leftBorder,\n\t$rightBorder,\n\t$bottomBorder,\n\t$related,\n\t$window,\n\t$loaded,\n\t$loadingBay,\n\t$loadingOverlay,\n\t$title,\n\t$current,\n\t$slideshow,\n\t$next,\n\t$prev,\n\t$close,\n\t$groupControls,\n\t$events = $('<a/>'), // $({}) would be prefered, but there is an issue with jQuery 1.4.2\n\n\t// Variables for cached values or use across multiple functions\n\tsettings,\n\tinterfaceHeight,\n\tinterfaceWidth,\n\tloadedHeight,\n\tloadedWidth,\n\tindex,\n\tphoto,\n\topen,\n\tactive,\n\tclosing,\n\tloadingTimer,\n\tpublicMethod,\n\tdiv = \"div\",\n\trequests = 0,\n\tpreviousCSS = {},\n\tinit;\n\n\t// ****************\n\t// HELPER FUNCTIONS\n\t// ****************\n\n\t// Convenience function for creating new jQuery objects\n\tfunction $tag(tag, id, css) {\n\t\tvar element = document.createElement(tag);\n\n\t\tif (id) {\n\t\t\telement.id = prefix + id;\n\t\t}\n\n\t\tif (css) {\n\t\t\telement.style.cssText = css;\n\t\t}\n\n\t\treturn $(element);\n\t}\n\n\t// Get the window height using innerHeight when available to avoid an issue with iOS\n\t// http://bugs.jquery.com/ticket/6724\n\tfunction winheight() {\n\t\treturn window.innerHeight ? window.innerHeight : $(window).height();\n\t}\n\n\tfunction Settings(element, options) {\n\t\tif (options !== Object(options)) {\n\t\t\toptions = {};\n\t\t}\n\n\t\tthis.cache = {};\n\t\tthis.el = element;\n\n\t\tthis.value = function(key) {\n\t\t\tvar dataAttr;\n\n\t\t\tif (this.cache[key] === undefined) {\n\t\t\t\tdataAttr = $(this.el).attr('data-cbox-'+key);\n\n\t\t\t\tif (dataAttr !== undefined) {\n\t\t\t\t\tthis.cache[key] = dataAttr;\n\t\t\t\t} else if (options[key] !== undefined) {\n\t\t\t\t\tthis.cache[key] = options[key];\n\t\t\t\t} else if (defaults[key] !== undefined) {\n\t\t\t\t\tthis.cache[key] = defaults[key];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this.cache[key];\n\t\t};\n\n\t\tthis.get = function(key) {\n\t\t\tvar value = this.value(key);\n\t\t\treturn $.isFunction(value) ? value.call(this.el, this) : value;\n\t\t};\n\t}\n\n\t// Determine the next and previous members in a group.\n\tfunction getIndex(increment) {\n\t\tvar\n\t\tmax = $related.length,\n\t\tnewIndex = (index + increment) % max;\n\n\t\treturn (newIndex < 0) ? max + newIndex : newIndex;\n\t}\n\n\t// Convert '%' and 'px' values to integers\n\tfunction setSize(size, dimension) {\n\t\treturn Math.round((/%/.test(size) ? ((dimension === 'x' ? $window.width() : winheight()) / 100) : 1) * parseInt(size, 10));\n\t}\n\n\t// Checks an href to see if it is a photo.\n\t// There is a force photo option (photo: true) for hrefs that cannot be matched by the regex.\n\tfunction isImage(settings, url) {\n\t\treturn settings.get('photo') || settings.get('photoRegex').test(url);\n\t}\n\n\tfunction retinaUrl(settings, url) {\n\t\treturn settings.get('retinaUrl') && window.devicePixelRatio > 1 ? url.replace(settings.get('photoRegex'), settings.get('retinaSuffix')) : url;\n\t}\n\n\tfunction trapFocus(e) {\n\t\tif ('contains' in $box[0] && !$box[0].contains(e.target) && e.target !== $overlay[0]) {\n\t\t\te.stopPropagation();\n\t\t\t$box.focus();\n\t\t}\n\t}\n\n\tfunction setClass(str) {\n\t\tif (setClass.str !== str) {\n\t\t\t$box.add($overlay).removeClass(setClass.str).addClass(str);\n\t\t\tsetClass.str = str;\n\t\t}\n\t}\n\n\tfunction getRelated(rel) {\n\t\tindex = 0;\n\n\t\tif (rel && rel !== false && rel !== 'nofollow') {\n\t\t\t$related = $('.' + boxElement).filter(function () {\n\t\t\t\tvar options = $.data(this, colorbox);\n\t\t\t\tvar settings = new Settings(this, options);\n\t\t\t\treturn (settings.get('rel') === rel);\n\t\t\t});\n\t\t\tindex = $related.index(settings.el);\n\n\t\t\t// Check direct calls to Colorbox.\n\t\t\tif (index === -1) {\n\t\t\t\t$related = $related.add(settings.el);\n\t\t\t\tindex = $related.length - 1;\n\t\t\t}\n\t\t} else {\n\t\t\t$related = $(settings.el);\n\t\t}\n\t}\n\n\tfunction trigger(event) {\n\t\t// for external use\n\t\t$(document).trigger(event);\n\t\t// for internal use\n\t\t$events.triggerHandler(event);\n\t}\n\n\tvar slideshow = (function(){\n\t\tvar active,\n\t\t\tclassName = prefix + \"Slideshow_\",\n\t\t\tclick = \"click.\" + prefix,\n\t\t\ttimeOut;\n\n\t\tfunction clear () {\n\t\t\tclearTimeout(timeOut);\n\t\t}\n\n\t\tfunction set() {\n\t\t\tif (settings.get('loop') || $related[index + 1]) {\n\t\t\t\tclear();\n\t\t\t\ttimeOut = setTimeout(publicMethod.next, settings.get('slideshowSpeed'));\n\t\t\t}\n\t\t}\n\n\t\tfunction start() {\n\t\t\t$slideshow\n\t\t\t\t.html(settings.get('slideshowStop'))\n\t\t\t\t.unbind(click)\n\t\t\t\t.one(click, stop);\n\n\t\t\t$events\n\t\t\t\t.bind(event_complete, set)\n\t\t\t\t.bind(event_load, clear);\n\n\t\t\t$box.removeClass(className + \"off\").addClass(className + \"on\");\n\t\t}\n\n\t\tfunction stop() {\n\t\t\tclear();\n\n\t\t\t$events\n\t\t\t\t.unbind(event_complete, set)\n\t\t\t\t.unbind(event_load, clear);\n\n\t\t\t$slideshow\n\t\t\t\t.html(settings.get('slideshowStart'))\n\t\t\t\t.unbind(click)\n\t\t\t\t.one(click, function () {\n\t\t\t\t\tpublicMethod.next();\n\t\t\t\t\tstart();\n\t\t\t\t});\n\n\t\t\t$box.removeClass(className + \"on\").addClass(className + \"off\");\n\t\t}\n\n\t\tfunction reset() {\n\t\t\tactive = false;\n\t\t\t$slideshow.hide();\n\t\t\tclear();\n\t\t\t$events\n\t\t\t\t.unbind(event_complete, set)\n\t\t\t\t.unbind(event_load, clear);\n\t\t\t$box.removeClass(className + \"off \" + className + \"on\");\n\t\t}\n\n\t\treturn function(){\n\t\t\tif (active) {\n\t\t\t\tif (!settings.get('slideshow')) {\n\t\t\t\t\t$events.unbind(event_cleanup, reset);\n\t\t\t\t\treset();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (settings.get('slideshow') && $related[1]) {\n\t\t\t\t\tactive = true;\n\t\t\t\t\t$events.one(event_cleanup, reset);\n\t\t\t\t\tif (settings.get('slideshowAuto')) {\n\t\t\t\t\t\tstart();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstop();\n\t\t\t\t\t}\n\t\t\t\t\t$slideshow.show();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t}());\n\n\n\tfunction launch(element) {\n\t\tvar options;\n\n\t\tif (!closing) {\n\n\t\t\toptions = $(element).data(colorbox);\n\n\t\t\tsettings = new Settings(element, options);\n\n\t\t\tgetRelated(settings.get('rel'));\n\n\t\t\tif (!open) {\n\t\t\t\topen = active = true; // Prevents the page-change action from queuing up if the visitor holds down the left or right keys.\n\n\t\t\t\tsetClass(settings.get('className'));\n\n\t\t\t\t// Show colorbox so the sizes can be calculated in older versions of jQuery\n\t\t\t\t$box.css({visibility:'hidden', display:'block', opacity:''});\n\n\t\t\t\t$loaded = $tag(div, 'LoadedContent', 'width:0; height:0; overflow:hidden; visibility:hidden');\n\t\t\t\t$content.css({width:'', height:''}).append($loaded);\n\n\t\t\t\t// Cache values needed for size calculations\n\t\t\t\tinterfaceHeight = $topBorder.height() + $bottomBorder.height() + $content.outerHeight(true) - $content.height();\n\t\t\t\tinterfaceWidth = $leftBorder.width() + $rightBorder.width() + $content.outerWidth(true) - $content.width();\n\t\t\t\tloadedHeight = $loaded.outerHeight(true);\n\t\t\t\tloadedWidth = $loaded.outerWidth(true);\n\n\t\t\t\t// Opens inital empty Colorbox prior to content being loaded.\n\t\t\t\tvar initialWidth = setSize(settings.get('initialWidth'), 'x');\n\t\t\t\tvar initialHeight = setSize(settings.get('initialHeight'), 'y');\n\t\t\t\tvar maxWidth = settings.get('maxWidth');\n\t\t\t\tvar maxHeight = settings.get('maxHeight');\n\n\t\t\t\tsettings.w = Math.max((maxWidth !== false ? Math.min(initialWidth, setSize(maxWidth, 'x')) : initialWidth) - loadedWidth - interfaceWidth, 0);\n\t\t\t\tsettings.h = Math.max((maxHeight !== false ? Math.min(initialHeight, setSize(maxHeight, 'y')) : initialHeight) - loadedHeight - interfaceHeight, 0);\n\n\t\t\t\t$loaded.css({width:'', height:settings.h});\n\t\t\t\tpublicMethod.position();\n\n\t\t\t\ttrigger(event_open);\n\t\t\t\tsettings.get('onOpen');\n\n\t\t\t\t$groupControls.add($title).hide();\n\n\t\t\t\t$box.focus();\n\n\t\t\t\tif (settings.get('trapFocus')) {\n\t\t\t\t\t// Confine focus to the modal\n\t\t\t\t\t// Uses event capturing that is not supported in IE8-\n\t\t\t\t\tif (document.addEventListener) {\n\n\t\t\t\t\t\tdocument.addEventListener('focus', trapFocus, true);\n\n\t\t\t\t\t\t$events.one(event_closed, function () {\n\t\t\t\t\t\t\tdocument.removeEventListener('focus', trapFocus, true);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Return focus on closing\n\t\t\t\tif (settings.get('returnFocus')) {\n\t\t\t\t\t$events.one(event_closed, function () {\n\t\t\t\t\t\t$(settings.el).focus();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar opacity = parseFloat(settings.get('opacity'));\n\t\t\t$overlay.css({\n\t\t\t\topacity: opacity === opacity ? opacity : '',\n\t\t\t\tcursor: settings.get('overlayClose') ? 'pointer' : '',\n\t\t\t\tvisibility: 'visible'\n\t\t\t}).show();\n\n\t\t\tif (settings.get('closeButton')) {\n\t\t\t\t$close.html(settings.get('close')).appendTo($content);\n\t\t\t} else {\n\t\t\t\t$close.appendTo('<div/>'); // replace with .detach() when dropping jQuery < 1.4\n\t\t\t}\n\n\t\t\tload();\n\t\t}\n\t}\n\n\t// Colorbox's markup needs to be added to the DOM prior to being called\n\t// so that the browser will go ahead and load the CSS background images.\n\tfunction appendHTML() {\n\t\tif (!$box) {\n\t\t\tinit = false;\n\t\t\t$window = $(window);\n\t\t\t$box = $tag(div).attr({\n\t\t\t\tid: colorbox,\n\t\t\t\t'class': $.support.opacity === false ? prefix + 'IE' : '', // class for optional IE8 & lower targeted CSS.\n\t\t\t\trole: 'dialog',\n\t\t\t\ttabindex: '-1'\n\t\t\t}).hide();\n\t\t\t$overlay = $tag(div, \"Overlay\").hide();\n\t\t\t$loadingOverlay = $([$tag(div, \"LoadingOverlay\")[0],$tag(div, \"LoadingGraphic\")[0]]);\n\t\t\t$wrap = $tag(div, \"Wrapper\");\n\t\t\t$content = $tag(div, \"Content\").append(\n\t\t\t\t$title = $tag(div, \"Title\"),\n\t\t\t\t$current = $tag(div, \"Current\"),\n\t\t\t\t$prev = $('<button type=\"button\"/>').attr({id:prefix+'Previous'}),\n\t\t\t\t$next = $('<button type=\"button\"/>').attr({id:prefix+'Next'}),\n\t\t\t\t$slideshow = $('<button type=\"button\"/>').attr({id:prefix+'Slideshow'}),\n\t\t\t\t$loadingOverlay\n\t\t\t);\n\n\t\t\t$close = $('<button type=\"button\"/>').attr({id:prefix+'Close'});\n\n\t\t\t$wrap.append( // The 3x3 Grid that makes up Colorbox\n\t\t\t\t$tag(div).append(\n\t\t\t\t\t$tag(div, \"TopLeft\"),\n\t\t\t\t\t$topBorder = $tag(div, \"TopCenter\"),\n\t\t\t\t\t$tag(div, \"TopRight\")\n\t\t\t\t),\n\t\t\t\t$tag(div, false, 'clear:left').append(\n\t\t\t\t\t$leftBorder = $tag(div, \"MiddleLeft\"),\n\t\t\t\t\t$content,\n\t\t\t\t\t$rightBorder = $tag(div, \"MiddleRight\")\n\t\t\t\t),\n\t\t\t\t$tag(div, false, 'clear:left').append(\n\t\t\t\t\t$tag(div, \"BottomLeft\"),\n\t\t\t\t\t$bottomBorder = $tag(div, \"BottomCenter\"),\n\t\t\t\t\t$tag(div, \"BottomRight\")\n\t\t\t\t)\n\t\t\t).find('div div').css({'float': 'left'});\n\n\t\t\t$loadingBay = $tag(div, false, 'position:absolute; width:9999px; visibility:hidden; display:none; max-width:none;');\n\n\t\t\t$groupControls = $next.add($prev).add($current).add($slideshow);\n\t\t}\n\t\tif (document.body && !$box.parent().length) {\n\t\t\t$(document.body).append($overlay, $box.append($wrap, $loadingBay));\n\t\t}\n\t}\n\n\t// Add Colorbox's event bindings\n\tfunction addBindings() {\n\t\tfunction clickHandler(e) {\n\t\t\t// ignore non-left-mouse-clicks and clicks modified with ctrl / command, shift, or alt.\n\t\t\t// See: http://jacklmoore.com/notes/click-events/\n\t\t\tif (!(e.which > 1 || e.shiftKey || e.altKey || e.metaKey || e.ctrlKey)) {\n\t\t\t\te.preventDefault();\n\t\t\t\tlaunch(this);\n\t\t\t}\n\t\t}\n\n\t\tif ($box) {\n\t\t\tif (!init) {\n\t\t\t\tinit = true;\n\n\t\t\t\t// Anonymous functions here keep the public method from being cached, thereby allowing them to be redefined on the fly.\n\t\t\t\t$next.click(function () {\n\t\t\t\t\tpublicMethod.next();\n\t\t\t\t});\n\t\t\t\t$prev.click(function () {\n\t\t\t\t\tpublicMethod.prev();\n\t\t\t\t});\n\t\t\t\t$close.click(function () {\n\t\t\t\t\tpublicMethod.close();\n\t\t\t\t});\n\t\t\t\t$overlay.click(function () {\n\t\t\t\t\tif (settings.get('overlayClose')) {\n\t\t\t\t\t\tpublicMethod.close();\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Key Bindings\n\t\t\t\t$(document).bind('keydown.' + prefix, function (e) {\n\t\t\t\t\tvar key = e.keyCode;\n\t\t\t\t\tif (open && settings.get('escKey') && key === 27) {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tpublicMethod.close();\n\t\t\t\t\t}\n\t\t\t\t\tif (open && settings.get('arrowKey') && $related[1] && !e.altKey) {\n\t\t\t\t\t\tif (key === 37) {\n\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t$prev.click();\n\t\t\t\t\t\t} else if (key === 39) {\n\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t$next.click();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif ($.isFunction($.fn.on)) {\n\t\t\t\t\t// For jQuery 1.7+\n\t\t\t\t\t$(document).on('click.'+prefix, '.'+boxElement, clickHandler);\n\t\t\t\t} else {\n\t\t\t\t\t// For jQuery 1.3.x -> 1.6.x\n\t\t\t\t\t// This code is never reached in jQuery 1.9, so do not contact me about 'live' being removed.\n\t\t\t\t\t// This is not here for jQuery 1.9, it's here for legacy users.\n\t\t\t\t\t$('.'+boxElement).live('click.'+prefix, clickHandler);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t// Don't do anything if Colorbox already exists.\n\tif ($[colorbox]) {\n\t\treturn;\n\t}\n\n\t// Append the HTML when the DOM loads\n\t$(appendHTML);\n\n\n\t// ****************\n\t// PUBLIC FUNCTIONS\n\t// Usage format: $.colorbox.close();\n\t// Usage from within an iframe: parent.jQuery.colorbox.close();\n\t// ****************\n\n\tpublicMethod = $.fn[colorbox] = $[colorbox] = function (options, callback) {\n\t\tvar settings;\n\t\tvar $obj = this;\n\n\t\toptions = options || {};\n\n\t\tif ($.isFunction($obj)) { // assume a call to $.colorbox\n\t\t\t$obj = $('<a/>');\n\t\t\toptions.open = true;\n\t\t}\n\n\t\tif (!$obj[0]) { // colorbox being applied to empty collection\n\t\t\treturn $obj;\n\t\t}\n\n\t\tappendHTML();\n\n\t\tif (addBindings()) {\n\n\t\t\tif (callback) {\n\t\t\t\toptions.onComplete = callback;\n\t\t\t}\n\n\t\t\t$obj.each(function () {\n\t\t\t\tvar old = $.data(this, colorbox) || {};\n\t\t\t\t$.data(this, colorbox, $.extend(old, options));\n\t\t\t}).addClass(boxElement);\n\n\t\t\tsettings = new Settings($obj[0], options);\n\n\t\t\tif (settings.get('open')) {\n\t\t\t\tlaunch($obj[0]);\n\t\t\t}\n\t\t}\n\n\t\treturn $obj;\n\t};\n\n\tpublicMethod.position = function (speed, loadedCallback) {\n\t\tvar\n\t\tcss,\n\t\ttop = 0,\n\t\tleft = 0,\n\t\toffset = $box.offset(),\n\t\tscrollTop,\n\t\tscrollLeft;\n\n\t\t$window.unbind('resize.' + prefix);\n\n\t\t// remove the modal so that it doesn't influence the document width/height\n\t\t$box.css({top: -9e4, left: -9e4});\n\n\t\tscrollTop = $window.scrollTop();\n\t\tscrollLeft = $window.scrollLeft();\n\n\t\tif (settings.get('fixed')) {\n\t\t\toffset.top -= scrollTop;\n\t\t\toffset.left -= scrollLeft;\n\t\t\t$box.css({position: 'fixed'});\n\t\t} else {\n\t\t\ttop = scrollTop;\n\t\t\tleft = scrollLeft;\n\t\t\t$box.css({position: 'absolute'});\n\t\t}\n\n\t\t// keeps the top and left positions within the browser's viewport.\n\t\tif (settings.get('right') !== false) {\n\t\t\tleft += Math.max($window.width() - settings.w - loadedWidth - interfaceWidth - setSize(settings.get('right'), 'x'), 0);\n\t\t} else if (settings.get('left') !== false) {\n\t\t\tleft += setSize(settings.get('left'), 'x');\n\t\t} else {\n\t\t\tleft += Math.round(Math.max($window.width() - settings.w - loadedWidth - interfaceWidth, 0) / 2);\n\t\t}\n\n\t\tif (settings.get('bottom') !== false) {\n\t\t\ttop += Math.max(winheight() - settings.h - loadedHeight - interfaceHeight - setSize(settings.get('bottom'), 'y'), 0);\n\t\t} else if (settings.get('top') !== false) {\n\t\t\ttop += setSize(settings.get('top'), 'y');\n\t\t} else {\n\t\t\ttop += Math.round(Math.max(winheight() - settings.h - loadedHeight - interfaceHeight, 0) / 2);\n\t\t}\n\n\t\t$box.css({top: offset.top, left: offset.left, visibility:'visible'});\n\n\t\t// this gives the wrapper plenty of breathing room so it's floated contents can move around smoothly,\n\t\t// but it has to be shrank down around the size of div#colorbox when it's done.  If not,\n\t\t// it can invoke an obscure IE bug when using iframes.\n\t\t$wrap[0].style.width = $wrap[0].style.height = \"9999px\";\n\n\t\tfunction modalDimensions() {\n\t\t\t$topBorder[0].style.width = $bottomBorder[0].style.width = $content[0].style.width = (parseInt($box[0].style.width,10) - interfaceWidth)+'px';\n\t\t\t$content[0].style.height = $leftBorder[0].style.height = $rightBorder[0].style.height = (parseInt($box[0].style.height,10) - interfaceHeight)+'px';\n\t\t}\n\n\t\tcss = {width: settings.w + loadedWidth + interfaceWidth, height: settings.h + loadedHeight + interfaceHeight, top: top, left: left};\n\n\t\t// setting the speed to 0 if the content hasn't changed size or position\n\t\tif (speed) {\n\t\t\tvar tempSpeed = 0;\n\t\t\t$.each(css, function(i){\n\t\t\t\tif (css[i] !== previousCSS[i]) {\n\t\t\t\t\ttempSpeed = speed;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t});\n\t\t\tspeed = tempSpeed;\n\t\t}\n\n\t\tpreviousCSS = css;\n\n\t\tif (!speed) {\n\t\t\t$box.css(css);\n\t\t}\n\n\t\t$box.dequeue().animate(css, {\n\t\t\tduration: speed || 0,\n\t\t\tcomplete: function () {\n\t\t\t\tmodalDimensions();\n\n\t\t\t\tactive = false;\n\n\t\t\t\t// shrink the wrapper down to exactly the size of colorbox to avoid a bug in IE's iframe implementation.\n\t\t\t\t$wrap[0].style.width = (settings.w + loadedWidth + interfaceWidth) + \"px\";\n\t\t\t\t$wrap[0].style.height = (settings.h + loadedHeight + interfaceHeight) + \"px\";\n\n\t\t\t\tif (settings.get('reposition')) {\n\t\t\t\t\tsetTimeout(function () {  // small delay before binding onresize due to an IE8 bug.\n\t\t\t\t\t\t$window.bind('resize.' + prefix, publicMethod.position);\n\t\t\t\t\t}, 1);\n\t\t\t\t}\n\n\t\t\t\tif ($.isFunction(loadedCallback)) {\n\t\t\t\t\tloadedCallback();\n\t\t\t\t}\n\t\t\t},\n\t\t\tstep: modalDimensions\n\t\t});\n\t};\n\n\tpublicMethod.resize = function (options) {\n\t\tvar scrolltop;\n\n\t\tif (open) {\n\t\t\toptions = options || {};\n\n\t\t\tif (options.width) {\n\t\t\t\tsettings.w = setSize(options.width, 'x') - loadedWidth - interfaceWidth;\n\t\t\t}\n\n\t\t\tif (options.innerWidth) {\n\t\t\t\tsettings.w = setSize(options.innerWidth, 'x');\n\t\t\t}\n\n\t\t\t$loaded.css({width: settings.w});\n\n\t\t\tif (options.height) {\n\t\t\t\tsettings.h = setSize(options.height, 'y') - loadedHeight - interfaceHeight;\n\t\t\t}\n\n\t\t\tif (options.innerHeight) {\n\t\t\t\tsettings.h = setSize(options.innerHeight, 'y');\n\t\t\t}\n\n\t\t\tif (!options.innerHeight && !options.height) {\n\t\t\t\tscrolltop = $loaded.scrollTop();\n\t\t\t\t$loaded.css({height: \"auto\"});\n\t\t\t\tsettings.h = $loaded.height();\n\t\t\t}\n\n\t\t\t$loaded.css({height: settings.h});\n\n\t\t\tif(scrolltop) {\n\t\t\t\t$loaded.scrollTop(scrolltop);\n\t\t\t}\n\n\t\t\tpublicMethod.position(settings.get('transition') === \"none\" ? 0 : settings.get('speed'));\n\t\t}\n\t};\n\n\tpublicMethod.prep = function (object) {\n\t\tif (!open) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar callback, speed = settings.get('transition') === \"none\" ? 0 : settings.get('speed');\n\n\t\t$loaded.remove();\n\n\t\t$loaded = $tag(div, 'LoadedContent').append(object);\n\n\t\tfunction getWidth() {\n\t\t\tsettings.w = settings.w || $loaded.width();\n\t\t\tsettings.w = settings.mw && settings.mw < settings.w ? settings.mw : settings.w;\n\t\t\treturn settings.w;\n\t\t}\n\t\tfunction getHeight() {\n\t\t\tsettings.h = settings.h || $loaded.height();\n\t\t\tsettings.h = settings.mh && settings.mh < settings.h ? settings.mh : settings.h;\n\t\t\treturn settings.h;\n\t\t}\n\n\t\t$loaded.hide()\n\t\t.appendTo($loadingBay.show())// content has to be appended to the DOM for accurate size calculations.\n\t\t.css({width: getWidth(), overflow: settings.get('scrolling') ? 'auto' : 'hidden'})\n\t\t.css({height: getHeight()})// sets the height independently from the width in case the new width influences the value of height.\n\t\t.prependTo($content);\n\n\t\t$loadingBay.hide();\n\n\t\t// floating the IMG removes the bottom line-height and fixed a problem where IE miscalculates the width of the parent element as 100% of the document width.\n\n\t\t$(photo).css({'float': 'none'});\n\n\t\tsetClass(settings.get('className'));\n\n\t\tcallback = function () {\n\t\t\tvar total = $related.length,\n\t\t\t\tiframe,\n\t\t\t\tcomplete;\n\n\t\t\tif (!open) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfunction removeFilter() { // Needed for IE8 in versions of jQuery prior to 1.7.2\n\t\t\t\tif ($.support.opacity === false) {\n\t\t\t\t\t$box[0].style.removeAttribute('filter');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcomplete = function () {\n\t\t\t\tclearTimeout(loadingTimer);\n\t\t\t\t$loadingOverlay.hide();\n\t\t\t\ttrigger(event_complete);\n\t\t\t\tsettings.get('onComplete');\n\t\t\t};\n\n\n\t\t\t$title.html(settings.get('title')).show();\n\t\t\t$loaded.show();\n\n\t\t\tif (total > 1) { // handle grouping\n\t\t\t\tif (typeof settings.get('current') === \"string\") {\n\t\t\t\t\t$current.html(settings.get('current').replace('{current}', index + 1).replace('{total}', total)).show();\n\t\t\t\t}\n\n\t\t\t\t$next[(settings.get('loop') || index < total - 1) ? \"show\" : \"hide\"]().html(settings.get('next'));\n\t\t\t\t$prev[(settings.get('loop') || index) ? \"show\" : \"hide\"]().html(settings.get('previous'));\n\n\t\t\t\tslideshow();\n\n\t\t\t\t// Preloads images within a rel group\n\t\t\t\tif (settings.get('preloading')) {\n\t\t\t\t\t$.each([getIndex(-1), getIndex(1)], function(){\n\t\t\t\t\t\tvar img,\n\t\t\t\t\t\t\ti = $related[this],\n\t\t\t\t\t\t\tsettings = new Settings(i, $.data(i, colorbox)),\n\t\t\t\t\t\t\tsrc = settings.get('href');\n\n\t\t\t\t\t\tif (src && isImage(settings, src)) {\n\t\t\t\t\t\t\tsrc = retinaUrl(settings, src);\n\t\t\t\t\t\t\timg = document.createElement('img');\n\t\t\t\t\t\t\timg.src = src;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$groupControls.hide();\n\t\t\t}\n\n\t\t\tif (settings.get('iframe')) {\n\n\t\t\t\tiframe = settings.get('createIframe');\n\n\t\t\t\tif (!settings.get('scrolling')) {\n\t\t\t\t\tiframe.scrolling = \"no\";\n\t\t\t\t}\n\n\t\t\t\t$(iframe)\n\t\t\t\t\t.attr({\n\t\t\t\t\t\tsrc: settings.get('href'),\n\t\t\t\t\t\t'class': prefix + 'Iframe'\n\t\t\t\t\t})\n\t\t\t\t\t.one('load', complete)\n\t\t\t\t\t.appendTo($loaded);\n\n\t\t\t\t$events.one(event_purge, function () {\n\t\t\t\t\tiframe.src = \"//about:blank\";\n\t\t\t\t});\n\n\t\t\t\tif (settings.get('fastIframe')) {\n\t\t\t\t\t$(iframe).trigger('load');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcomplete();\n\t\t\t}\n\n\t\t\tif (settings.get('transition') === 'fade') {\n\t\t\t\t$box.fadeTo(speed, 1, removeFilter);\n\t\t\t} else {\n\t\t\t\tremoveFilter();\n\t\t\t}\n\t\t};\n\n\t\tif (settings.get('transition') === 'fade') {\n\t\t\t$box.fadeTo(speed, 0, function () {\n\t\t\t\tpublicMethod.position(0, callback);\n\t\t\t});\n\t\t} else {\n\t\t\tpublicMethod.position(speed, callback);\n\t\t}\n\t};\n\n\tfunction load () {\n\t\tvar href, setResize, prep = publicMethod.prep, $inline, request = ++requests;\n\n\t\tactive = true;\n\n\t\tphoto = false;\n\n\t\ttrigger(event_purge);\n\t\ttrigger(event_load);\n\t\tsettings.get('onLoad');\n\n\t\tsettings.h = settings.get('height') ?\n\t\t\t\tsetSize(settings.get('height'), 'y') - loadedHeight - interfaceHeight :\n\t\t\t\tsettings.get('innerHeight') && setSize(settings.get('innerHeight'), 'y');\n\n\t\tsettings.w = settings.get('width') ?\n\t\t\t\tsetSize(settings.get('width'), 'x') - loadedWidth - interfaceWidth :\n\t\t\t\tsettings.get('innerWidth') && setSize(settings.get('innerWidth'), 'x');\n\n\t\t// Sets the minimum dimensions for use in image scaling\n\t\tsettings.mw = settings.w;\n\t\tsettings.mh = settings.h;\n\n\t\t// Re-evaluate the minimum width and height based on maxWidth and maxHeight values.\n\t\t// If the width or height exceed the maxWidth or maxHeight, use the maximum values instead.\n\t\tif (settings.get('maxWidth')) {\n\t\t\tsettings.mw = setSize(settings.get('maxWidth'), 'x') - loadedWidth - interfaceWidth;\n\t\t\tsettings.mw = settings.w && settings.w < settings.mw ? settings.w : settings.mw;\n\t\t}\n\t\tif (settings.get('maxHeight')) {\n\t\t\tsettings.mh = setSize(settings.get('maxHeight'), 'y') - loadedHeight - interfaceHeight;\n\t\t\tsettings.mh = settings.h && settings.h < settings.mh ? settings.h : settings.mh;\n\t\t}\n\n\t\thref = settings.get('href');\n\n\t\tloadingTimer = setTimeout(function () {\n\t\t\t$loadingOverlay.show();\n\t\t}, 100);\n\n\t\tif (settings.get('inline')) {\n\t\t\tvar $target = $(href).eq(0);\n\t\t\t// Inserts an empty placeholder where inline content is being pulled from.\n\t\t\t// An event is bound to put inline content back when Colorbox closes or loads new content.\n\t\t\t$inline = $('<div>').hide().insertBefore($target);\n\n\t\t\t$events.one(event_purge, function () {\n\t\t\t\t$inline.replaceWith($target);\n\t\t\t});\n\n\t\t\tprep($target);\n\t\t} else if (settings.get('iframe')) {\n\t\t\t// IFrame element won't be added to the DOM until it is ready to be displayed,\n\t\t\t// to avoid problems with DOM-ready JS that might be trying to run in that iframe.\n\t\t\tprep(\" \");\n\t\t} else if (settings.get('html')) {\n\t\t\tprep(settings.get('html'));\n\t\t} else if (isImage(settings, href)) {\n\n\t\t\thref = retinaUrl(settings, href);\n\n\t\t\tphoto = settings.get('createImg');\n\n\t\t\t$(photo)\n\t\t\t.addClass(prefix + 'Photo')\n\t\t\t.bind('error.'+prefix,function () {\n\t\t\t\tprep($tag(div, 'Error').html(settings.get('imgError')));\n\t\t\t})\n\t\t\t.one('load', function () {\n\t\t\t\tif (request !== requests) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// A small pause because some browsers will occassionaly report a\n\t\t\t\t// img.width and img.height of zero immediately after the img.onload fires\n\t\t\t\tsetTimeout(function(){\n\t\t\t\t\tvar percent;\n\n\t\t\t\t\tif (settings.get('retinaImage') && window.devicePixelRatio > 1) {\n\t\t\t\t\t\tphoto.height = photo.height / window.devicePixelRatio;\n\t\t\t\t\t\tphoto.width = photo.width / window.devicePixelRatio;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (settings.get('scalePhotos')) {\n\t\t\t\t\t\tsetResize = function () {\n\t\t\t\t\t\t\tphoto.height -= photo.height * percent;\n\t\t\t\t\t\t\tphoto.width -= photo.width * percent;\n\t\t\t\t\t\t};\n\t\t\t\t\t\tif (settings.mw && photo.width > settings.mw) {\n\t\t\t\t\t\t\tpercent = (photo.width - settings.mw) / photo.width;\n\t\t\t\t\t\t\tsetResize();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (settings.mh && photo.height > settings.mh) {\n\t\t\t\t\t\t\tpercent = (photo.height - settings.mh) / photo.height;\n\t\t\t\t\t\t\tsetResize();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (settings.h) {\n\t\t\t\t\t\tphoto.style.marginTop = Math.max(settings.mh - photo.height, 0) / 2 + 'px';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($related[1] && (settings.get('loop') || $related[index + 1])) {\n\t\t\t\t\t\tphoto.style.cursor = 'pointer';\n\n\t\t\t\t\t\t$(photo).bind('click.'+prefix, function () {\n\t\t\t\t\t\t\tpublicMethod.next();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tphoto.style.width = photo.width + 'px';\n\t\t\t\t\tphoto.style.height = photo.height + 'px';\n\t\t\t\t\tprep(photo);\n\t\t\t\t}, 1);\n\t\t\t});\n\n\t\t\tphoto.src = href;\n\n\t\t} else if (href) {\n\t\t\t$loadingBay.load(href, settings.get('data'), function (data, status) {\n\t\t\t\tif (request === requests) {\n\t\t\t\t\tprep(status === 'error' ? $tag(div, 'Error').html(settings.get('xhrError')) : $(this).contents());\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t// Navigates to the next page/image in a set.\n\tpublicMethod.next = function () {\n\t\tif (!active && $related[1] && (settings.get('loop') || $related[index + 1])) {\n\t\t\tindex = getIndex(1);\n\t\t\tlaunch($related[index]);\n\t\t}\n\t};\n\n\tpublicMethod.prev = function () {\n\t\tif (!active && $related[1] && (settings.get('loop') || index)) {\n\t\t\tindex = getIndex(-1);\n\t\t\tlaunch($related[index]);\n\t\t}\n\t};\n\n\t// Note: to use this within an iframe use the following format: parent.jQuery.colorbox.close();\n\tpublicMethod.close = function () {\n\t\tif (open && !closing) {\n\n\t\t\tclosing = true;\n\t\t\topen = false;\n\t\t\ttrigger(event_cleanup);\n\t\t\tsettings.get('onCleanup');\n\t\t\t$window.unbind('.' + prefix);\n\t\t\t$overlay.fadeTo(settings.get('fadeOut') || 0, 0);\n\n\t\t\t$box.stop().fadeTo(settings.get('fadeOut') || 0, 0, function () {\n\t\t\t\t$box.hide();\n\t\t\t\t$overlay.hide();\n\t\t\t\ttrigger(event_purge);\n\t\t\t\t$loaded.remove();\n\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tclosing = false;\n\t\t\t\t\ttrigger(event_closed);\n\t\t\t\t\tsettings.get('onClosed');\n\t\t\t\t}, 1);\n\t\t\t});\n\t\t}\n\t};\n\n\t// Removes changes Colorbox made to the document, but does not remove the plugin.\n\tpublicMethod.remove = function () {\n\t\tif (!$box) { return; }\n\n\t\t$box.stop();\n\t\t$[colorbox].close();\n\t\t$box.stop(false, true).remove();\n\t\t$overlay.remove();\n\t\tclosing = false;\n\t\t$box = null;\n\t\t$('.' + boxElement)\n\t\t\t.removeData(colorbox)\n\t\t\t.removeClass(boxElement);\n\n\t\t$(document).unbind('click.'+prefix).unbind('keydown.'+prefix);\n\t};\n\n\t// A method for fetching the current element Colorbox is referencing.\n\t// returns a jQuery object.\n\tpublicMethod.element = function () {\n\t\treturn $(settings.el);\n\t};\n\n\tpublicMethod.settings = defaults;\n\n}(jQuery, document, window));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jquery-colorbox/jquery.colorbox.js\n");

/***/ }),

/***/ "./node_modules/responsive-toolkit/src/bootstrap-toolkit.js":
/***/ (function(module, exports) {

eval("/*!\n * Responsive Bootstrap Toolkit\n * Author:    Maciej Gurban\n * License:   MIT\n * Version:   2.6.3 (2016-06-21)\n * Origin:    https://github.com/maciej-gurban/responsive-bootstrap-toolkit\n */\nvar ResponsiveBootstrapToolkit = (function($){\n\n    // Internal methods\n    var internal = {\n\n        /**\n         * Breakpoint detection divs for each framework version\n         */\n        detectionDivs: {\n            // Bootstrap 3\n            bootstrap: {\n                'xs': $('<div class=\"device-xs visible-xs visible-xs-block\"></div>'),\n                'sm': $('<div class=\"device-sm visible-sm visible-sm-block\"></div>'),\n                'md': $('<div class=\"device-md visible-md visible-md-block\"></div>'),\n                'lg': $('<div class=\"device-lg visible-lg visible-lg-block\"></div>')\n            },\n            // Foundation 5\n            foundation: {\n                'small':  $('<div class=\"device-xs show-for-small-only\"></div>'),\n                'medium': $('<div class=\"device-sm show-for-medium-only\"></div>'),\n                'large':  $('<div class=\"device-md show-for-large-only\"></div>'),\n                'xlarge': $('<div class=\"device-lg show-for-xlarge-only\"></div>')\n            }\n        },\n\n         /**\n         * Append visibility divs after DOM laoded\n         */\n        applyDetectionDivs: function() {\n            $(document).ready(function(){\n                $.each(self.breakpoints, function(alias){\n                    self.breakpoints[alias].appendTo('.responsive-bootstrap-toolkit');\n                });\n            });\n        },\n\n        /**\n         * Determines whether passed string is a parsable expression\n         */\n        isAnExpression: function( str ) {\n            return (str.charAt(0) == '<' || str.charAt(0) == '>');\n        },\n\n        /**\n         * Splits the expression in into <|> [=] alias\n         */\n        splitExpression: function( str ) {\n\n            // Used operator\n            var operator = str.charAt(0);\n            // Include breakpoint equal to alias?\n            var orEqual  = (str.charAt(1) == '=') ? true : false;\n\n            /**\n             * Index at which breakpoint name starts.\n             *\n             * For:  >sm, index = 1\n             * For: >=sm, index = 2\n             */\n            var index = 1 + (orEqual ? 1 : 0);\n\n            /**\n             * The remaining part of the expression, after the operator, will be treated as the\n             * breakpoint name to compare with\n             */\n            var breakpointName = str.slice(index);\n\n            return {\n                operator:       operator,\n                orEqual:        orEqual,\n                breakpointName: breakpointName\n            };\n        },\n\n        /**\n         * Returns true if currently active breakpoint matches the expression\n         */\n        isAnyActive: function( breakpoints ) {\n            var found = false;\n            $.each(breakpoints, function( index, alias ) {\n                // Once first breakpoint matches, return true and break out of the loop\n                if( self.breakpoints[ alias ].is(':visible') ) {\n                    found = true;\n                    return false;\n                }\n            });\n            return found;\n        },\n\n        /**\n         * Determines whether current breakpoint matches the expression given\n         */\n        isMatchingExpression: function( str ) {\n\n            var expression = internal.splitExpression( str );\n\n            // Get names of all breakpoints\n            var breakpointList = Object.keys(self.breakpoints);\n\n            // Get index of sought breakpoint in the list\n            var pos = breakpointList.indexOf( expression.breakpointName );\n\n            // Breakpoint found\n            if( pos !== -1 ) {\n\n                var start = 0;\n                var end   = 0;\n\n                /**\n                 * Parsing viewport.is('<=md') we interate from smallest breakpoint ('xs') and end\n                 * at 'md' breakpoint, indicated in the expression,\n                 * That makes: start = 0, end = 2 (index of 'md' breakpoint)\n                 *\n                 * Parsing viewport.is('<md') we start at index 'xs' breakpoint, and end at\n                 * 'sm' breakpoint, one before 'md'.\n                 * Which makes: start = 0, end = 1\n                 */\n                if( expression.operator == '<' ) {\n                    start = 0;\n                    end   = expression.orEqual ? ++pos : pos;\n                }\n                /**\n                 * Parsing viewport.is('>=sm') we interate from breakpoint 'sm' and end at the end\n                 * of breakpoint list.\n                 * That makes: start = 1, end = undefined\n                 *\n                 * Parsing viewport.is('>sm') we start at breakpoint 'md' and end at the end of\n                 * breakpoint list.\n                 * Which makes: start = 2, end = undefined\n                 */\n                if( expression.operator == '>' ) {\n                    start = expression.orEqual ? pos : ++pos;\n                    end   = undefined;\n                }\n\n                var acceptedBreakpoints = breakpointList.slice(start, end);\n\n                return internal.isAnyActive( acceptedBreakpoints );\n\n            }\n        }\n\n    };\n\n    // Public methods and properties\n    var self = {\n\n        /**\n         * Determines default debouncing interval of 'changed' method\n         */\n        interval: 300,\n\n        /**\n         *\n         */\n        framework: null,\n\n        /**\n         * Breakpoint aliases, listed from smallest to biggest\n         */\n        breakpoints: null,\n\n        /**\n         * Returns true if current breakpoint matches passed alias\n         */\n        is: function( str ) {\n            if( internal.isAnExpression( str ) ) {\n                return internal.isMatchingExpression( str );\n            }\n            return self.breakpoints[ str ] && self.breakpoints[ str ].is(':visible');\n        },\n\n        /**\n         * Determines which framework-specific breakpoint detection divs to use\n         */\n        use: function( frameworkName, breakpoints ) {\n            self.framework = frameworkName.toLowerCase();\n\n            if( self.framework === 'bootstrap' || self.framework === 'foundation') {\n                self.breakpoints = internal.detectionDivs[ self.framework ];\n            } else {\n                self.breakpoints = breakpoints;\n            }\n\n            internal.applyDetectionDivs();\n        },\n\n        /**\n         * Returns current breakpoint alias\n         */\n        current: function(){\n            var name = 'unrecognized';\n            $.each(self.breakpoints, function(alias){\n                if (self.is(alias)) {\n                    name = alias;\n                }\n            });\n            return name;\n        },\n\n        /*\n         * Waits specified number of miliseconds before executing a callback\n         */\n        changed: function(fn, ms) {\n            var timer;\n            return function(){\n                clearTimeout(timer);\n                timer = setTimeout(function(){\n                    fn();\n                }, ms || self.interval);\n            };\n        }\n\n    };\n\n    // Create a placeholder\n    $(document).ready(function(){\n        $('<div class=\"responsive-bootstrap-toolkit\"></div>').appendTo('body');\n    });\n\n    if( self.framework === null ) {\n        self.use('bootstrap');\n    }\n\n    return self;\n\n})(jQuery);\n\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = ResponsiveBootstrapToolkit;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/responsive-toolkit/src/bootstrap-toolkit.js\n");

/***/ }),

/***/ "./node_modules/twitter-fetcher/js/twitterFetcher_min.js":
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*********************************************************************\r\n*  #### Twitter Post Fetcher v18.0.4 ####\r\n*  Coded by Jason Mayes 2015. A present to all the developers out there.\r\n*  www.jasonmayes.com\r\n*  Please keep this disclaimer with my code if you use it. Thanks. :-)\r\n*  Got feedback or questions, ask here:\r\n*  http://www.jasonmayes.com/projects/twitterApi/\r\n*  Github: https://github.com/jasonmayes/Twitter-Post-Fetcher\r\n*  Updates will be posted to this site.\r\n*********************************************************************/\r\n!function(e,t){ true?!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (t),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):\"object\"==typeof exports?module.exports=t():t()}(0,function(){var e=\"\",t=20,i=!0,n=[],a=!1,l=!0,s=!0,r=null,o=!0,c=!0,m=null,d=!0,p=!1,u=!1,g=!0,h=!0,w=!1,f=null;function b(e){return e.replace(/<b[^>]*>(.*?)<\\/b>/gi,function(e,t){return t}).replace(/class=\"(?!(tco-hidden|tco-display|tco-ellipsis))+.*?\"|data-query-source=\".*?\"|dir=\".*?\"|rel=\".*?\"/gi,\"\")}function v(e){for(var t=e.getElementsByTagName(\"a\"),i=t.length-1;i>=0;i--)t[i].setAttribute(\"target\",\"_blank\"),t[i].setAttribute(\"rel\",\"noopener\")}function _(e,t){for(var i=[],n=new RegExp(\"(^| )\"+t+\"( |$)\"),a=e.getElementsByTagName(\"*\"),l=0,s=a.length;l<s;l++)n.test(a[l].className)&&i.push(a[l]);return i}function y(e){if(void 0!==e&&e.innerHTML.indexOf(\"data-image\")>=0){for(var t=e.innerHTML.match(/data-image=\\\"([^\"]+)\\\"/gi),i=0;i<t.length;i++)t[i]=t[i].match(/data-image=\\\"([^\"]+)\\\"/i)[1],t[i]=decodeURIComponent(t[i])+\".jpg\";return t}}var T={fetch:function(o){if(void 0===o.maxTweets&&(o.maxTweets=20),void 0===o.enableLinks&&(o.enableLinks=!0),void 0===o.showUser&&(o.showUser=!0),void 0===o.showTime&&(o.showTime=!0),void 0===o.dateFunction&&(o.dateFunction=\"default\"),void 0===o.showRetweet&&(o.showRetweet=!0),void 0===o.customCallback&&(o.customCallback=null),void 0===o.showInteraction&&(o.showInteraction=!0),void 0===o.showImages&&(o.showImages=!1),void 0===o.useEmoji&&(o.useEmoji=!1),void 0===o.linksInNewWindow&&(o.linksInNewWindow=!0),void 0===o.showPermalinks&&(o.showPermalinks=!0),void 0===o.dataOnly&&(o.dataOnly=!1),a)n.push(o);else{a=!0,e=o.domId,t=o.maxTweets,i=o.enableLinks,s=o.showUser,l=o.showTime,c=o.showRetweet,r=o.dateFunction,m=o.customCallback,d=o.showInteraction,p=o.showImages,u=o.useEmoji,g=o.linksInNewWindow,h=o.showPermalinks,w=o.dataOnly;var b=document.getElementsByTagName(\"head\")[0];null!==f&&b.removeChild(f),(f=document.createElement(\"script\")).type=\"text/javascript\",void 0!==o.list?f.src=\"https://syndication.twitter.com/timeline/list?callback=__twttrf.callback&dnt=false&list_slug=\"+o.list.listSlug+\"&screen_name=\"+o.list.screenName+\"&suppress_response_codes=true&lang=\"+(o.lang||\"en\")+\"&rnd=\"+Math.random():void 0!==o.profile?f.src=\"https://syndication.twitter.com/timeline/profile?callback=__twttrf.callback&dnt=false&screen_name=\"+o.profile.screenName+\"&suppress_response_codes=true&lang=\"+(o.lang||\"en\")+\"&rnd=\"+Math.random():void 0!==o.likes?f.src=\"https://syndication.twitter.com/timeline/likes?callback=__twttrf.callback&dnt=false&screen_name=\"+o.likes.screenName+\"&suppress_response_codes=true&lang=\"+(o.lang||\"en\")+\"&rnd=\"+Math.random():void 0!==o.collection?f.src=\"https://syndication.twitter.com/timeline/collection?callback=__twttrf.callback&dnt=false&collection_id=\"+o.collection.collectionId+\"&suppress_response_codes=true&lang=\"+(o.lang||\"en\")+\"&rnd=\"+Math.random():f.src=\"https://cdn.syndication.twimg.com/widgets/timelines/\"+o.id+\"?&lang=\"+(o.lang||\"en\")+\"&callback=__twttrf.callback&suppress_response_codes=true&rnd=\"+Math.random(),b.appendChild(f)}},callback:function(f){if(void 0===f||void 0===f.body)return a=!1,void(n.length>0&&(T.fetch(n[0]),n.splice(0,1)));u||(f.body=f.body.replace(/(<img[^c]*class=\"Emoji[^>]*>)|(<img[^c]*class=\"u-block[^>]*>)/g,\"\")),p||(f.body=f.body.replace(/(<img[^c]*class=\"NaturalImage-image[^>]*>|(<img[^c]*class=\"CroppedImage-image[^>]*>))/g,\"\")),s||(f.body=f.body.replace(/(<img[^c]*class=\"Avatar\"[^>]*>)/g,\"\"));var k=document.createElement(\"div\");function C(e){var t=e.getElementsByTagName(\"img\")[0];if(t)t.src=t.getAttribute(\"data-src-2x\");else{var i=e.getElementsByTagName(\"a\")[0].getAttribute(\"href\").split(\"twitter.com/\")[1],n=document.createElement(\"img\");n.setAttribute(\"src\",\"https://twitter.com/\"+i+\"/profile_image?size=bigger\"),e.prepend(n)}return e}k.innerHTML=f.body,void 0===k.getElementsByClassName&&(o=!1);var E=[],x=[],N=[],A=[],B=[],I=[],M=[],L=0;if(o)for(var j=k.getElementsByClassName(\"timeline-Tweet\");L<j.length;)j[L].getElementsByClassName(\"timeline-Tweet-retweetCredit\").length>0?B.push(!0):B.push(!1),(!B[L]||B[L]&&c)&&(E.push(j[L].getElementsByClassName(\"timeline-Tweet-text\")[0]),I.push(j[L].getAttribute(\"data-tweet-id\")),s&&x.push(C(j[L].getElementsByClassName(\"timeline-Tweet-author\")[0])),N.push(j[L].getElementsByClassName(\"dt-updated\")[0]),M.push(j[L].getElementsByClassName(\"timeline-Tweet-timestamp\")[0]),void 0!==j[L].getElementsByClassName(\"timeline-Tweet-media\")[0]?A.push(j[L].getElementsByClassName(\"timeline-Tweet-media\")[0]):A.push(void 0)),L++;else for(j=_(k,\"timeline-Tweet\");L<j.length;)_(j[L],\"timeline-Tweet-retweetCredit\").length>0?B.push(!0):B.push(!1),(!B[L]||B[L]&&c)&&(E.push(_(j[L],\"timeline-Tweet-text\")[0]),I.push(j[L].getAttribute(\"data-tweet-id\")),s&&x.push(C(_(j[L],\"timeline-Tweet-author\")[0])),N.push(_(j[L],\"dt-updated\")[0]),M.push(_(j[L],\"timeline-Tweet-timestamp\")[0]),void 0!==_(j[L],\"timeline-Tweet-media\")[0]?A.push(_(j[L],\"timeline-Tweet-media\")[0]):A.push(void 0)),L++;E.length>t&&(E.splice(t,E.length-t),x.splice(t,x.length-t),N.splice(t,N.length-t),B.splice(t,B.length-t),A.splice(t,A.length-t),M.splice(t,M.length-t));var H=[],P=(L=E.length,0);if(w)for(;P<L;)H.push({tweet:E[P].innerHTML,tweetText:E[P].textContent,author:x[P]?x[P].innerHTML:\"Unknown Author\",author_data:{profile_url:x[P]?x[P].querySelector('[data-scribe=\"element:user_link\"]').href:null,profile_image:x[P]?\"https://twitter.com/\"+x[P].querySelector('[data-scribe=\"element:screen_name\"]').title.split(\"@\")[1]+\"/profile_image?size=bigger\":null,profile_image_2x:x[P]?\"https://twitter.com/\"+x[P].querySelector('[data-scribe=\"element:screen_name\"]').title.split(\"@\")[1]+\"/profile_image?size=original\":null,screen_name:x[P]?x[P].querySelector('[data-scribe=\"element:screen_name\"]').title:null,name:x[P]?x[P].querySelector('[data-scribe=\"element:name\"]').title:null},time:N[P].textContent,timestamp:N[P].getAttribute(\"datetime\").replace(\"+0000\",\"Z\").replace(/([\\+\\-])(\\d\\d)(\\d\\d)/,\"$1$2:$3\"),image:y(A[P])?y(A[P])[0]:void 0,images:y(A[P]),rt:B[P],tid:I[P],permalinkURL:void 0===M[P]?\"\":M[P].href}),P++;else for(;P<L;){if(\"string\"!=typeof r){var R=N[P].getAttribute(\"datetime\"),F=new Date(N[P].getAttribute(\"datetime\").replace(/-/g,\"/\").replace(\"T\",\" \").split(\"+\")[0]),S=r(F,R);if(N[P].setAttribute(\"aria-label\",S),E[P].textContent)if(o)N[P].textContent=S;else{var q=document.createElement(\"p\"),O=document.createTextNode(S);q.appendChild(O),q.setAttribute(\"aria-label\",S),N[P]=q}else N[P].textContent=S}var U=\"\";if(i?(g&&(v(E[P]),s&&v(x[P])),s&&(U+='<div class=\"user\">'+b(x[P].innerHTML)+\"</div>\"),U+='<p class=\"tweet\">'+b(E[P].innerHTML)+\"</p>\",l&&(U+=h?'<p class=\"timePosted\"><a href=\"'+M[P]+'\">'+N[P].getAttribute(\"aria-label\")+\"</a></p>\":'<p class=\"timePosted\">'+N[P].getAttribute(\"aria-label\")+\"</p>\")):(E[P].textContent,s&&(U+='<p class=\"user\">'+x[P].textContent+\"</p>\"),U+='<p class=\"tweet\">'+E[P].textContent+\"</p>\",l&&(U+='<p class=\"timePosted\">'+N[P].textContent+\"</p>\")),d&&(U+='<p class=\"interact\"><a href=\"https://twitter.com/intent/tweet?in_reply_to='+I[P]+'\" class=\"twitter_reply_icon\"'+(g?' target=\"_blank\" rel=\"noopener\">':\">\")+'Reply</a><a href=\"https://twitter.com/intent/retweet?tweet_id='+I[P]+'\" class=\"twitter_retweet_icon\"'+(g?' target=\"_blank\" rel=\"noopener\">':\">\")+'Retweet</a><a href=\"https://twitter.com/intent/favorite?tweet_id='+I[P]+'\" class=\"twitter_fav_icon\"'+(g?' target=\"_blank\" rel=\"noopener\">':\">\")+\"Favorite</a></p>\"),p&&void 0!==A[P]&&void 0!==y(A[P]))for(var D=y(A[P]),$=0;$<D.length;$++)U+='<div class=\"media\"><img src=\"'+D[$]+'\" alt=\"Image from tweet\" /></div>';p?H.push(U):!p&&E[P].textContent.length&&H.push(U),P++}!function(t){if(null===m){for(var i=t.length,n=0,a=document.getElementById(e),l=\"<ul>\";n<i;)l+=\"<li>\"+t[n]+\"</li>\",n++;l+=\"</ul>\",a.innerHTML=l}else m(t)}(H),a=!1,n.length>0&&(T.fetch(n[0]),n.splice(0,1))}};return window.__twttrf=T,window.twitterFetcher=T,T}),[Element.prototype,Document.prototype,DocumentFragment.prototype].forEach(function(e){e.hasOwnProperty(\"prepend\")||Object.defineProperty(e,\"prepend\",{configurable:!0,enumerable:!0,writable:!0,value:function(){var e=Array.prototype.slice.call(arguments),t=document.createDocumentFragment();e.forEach(function(e){var i=e instanceof Node;t.appendChild(i?e:document.createTextNode(String(e)))}),this.insertBefore(t,this.firstChild)}})});\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/twitter-fetcher/js/twitterFetcher_min.js\n");

/***/ }),

/***/ "./source/_assets/js/main.js":
/***/ (function(module, exports, __webpack_require__) {

eval("jQuery(document).ready(function () {\n  // Scroll-bar width for 100vw sections\n  document.documentElement.style.setProperty('--scrollbar-width', window.innerWidth - document.documentElement.clientWidth + \"px\");\n\n  // Check testimonial picture if vertical for spacing\n  $('.quote-feature-img').each(function () {\n    var $this = $(this);\n    var img = $(this).find('img')[0];\n    if (img.naturalWidth < img.naturalHeight) {\n      $this.addClass('vertical');\n    }\n  });\n\n  $(\"header .alert .dismiss-alert\").click(function (e) {\n    e.preventDefault();\n    if ($(\"header .alert\").hasClass('dismissed')) {\n      $('header .alert').removeClass('dismissed');\n      $('header .alert .dismiss-alert-label').text('Hide Details');\n    } else {\n      $('header .alert').addClass('dismissed');\n      $('header .alert .dismiss-alert-label').text('Show Details');\n    }\n  });\n\n  // Adds margins for 100% height cards in flexbox\n  // TODO: Fix this for only direct descendants \n  $(\"[class*='col-sm-']:has('.card')\").addClass('card-margin');\n  $(\"[class*='col-md-']:has('.card')\").addClass('card-margin');\n  $(\"[class*='col-sm-']:has('p.card-link')\").addClass('card-link-margin');\n  $(\"[class*='col-md-']:has('p.card-link')\").addClass('card-link-margin');\n\n  $('body').on('click', '.megamenu .dropdown-toggle', function (e) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    // If not showing, show dropdown menu\n    var _d = $(this).closest('.dropdown');\n    if (_d.hasClass('show')) {\n      // RemoveClass Show\n      $(_d).removeClass('show');\n    } else {\n      // AddClass Show\n      $(_d).removeClass('show');\n      _d.addClass('show');\n    }\n  });\n\n  $('body').on('click', '.expand-button', function (e) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    var _d = $(this).closest('.homepage-banner').siblings('.homepage-expand');\n    if (_d.hasClass('show')) {\n      // Close the element, change it to hidden\n      $(this).parents('.homepage-banner-container').removeClass(\"expanded\");\n      $(this).attr('aria-expanded', 'false').text('Expand');\n      $(_d).removeClass('show');\n      $(_d).find('.hero-expandcontent').attr('aria-hidden', 'true');\n    } else {\n      $(this).parents('.homepage-banner-container').addClass(\"expanded\");\n      $(this).attr('aria-expanded', 'true').text('Close');\n      $(_d).addClass('show');\n      $(_d).find('.hero-expandcontent').attr('aria-hidden', 'false');\n\n      // Scroll to open area when expanded\n      $(\"html, body\").animate({\n        scrollTop: $(_d).offset().top - 40\n      }, 100);\n    }\n  });\n\n  $('.accordion .collapse:not(.show) ').each(function () {\n    $(this).css('visibility', 'hidden');\n  });\n\n  // Accordion, highlight active header \n  $('.collapse').on('shown.bs.collapse', function () {\n    $(this).prev().addClass('active');\n    $(this).css('visibility', 'visible');\n  });\n\n  $('.collapse').on('hidden.bs.collapse', function () {\n    $(this).prev().removeClass('active');\n    $(this).css('visibility', 'hidden');\n  });\n\n  $(\".header-actions .searchicon\").click(function (event) {\n    if (!$(this).hasClass('active')) {\n      $(this).addClass('active');\n      event.preventDefault();\n      $('.header-actions .searchbox input').show(); //noscript \n      $('.header-actions .searchbox input').focus();\n    } else {\n      if ($('.header-actions .searchbox input')[0].value === '') {\n        // console.log('no text!')\n        event.preventDefault();\n        $('.header-actions .searchbox input').hide();\n        $(this).removeClass('active');\n      } else {\n        // submit\n      }\n    }\n  });\n\n  //--- Gavin Smith 8-16-17 Merge data into page if any requests on page\n  if (typeof LoadShorelineData == 'function') {\n    LoadShorelineData();\n  }\n\n  // Smooth scroll to anchor\n  $(\"a.scrollable\").click(function (event) {\n    event.preventDefault();\n    var goToId = $(this).attr(\"href\");\n    if ($(goToId).length) {\n      // If an anchor exists with this href\n      $(\"html, body\").animate({\n        scrollTop: $($(this).attr(\"href\")).offset().top - shoreline.scrollableOffset\n      }, 500);\n      // Add tabindex -1 so the anchored text can be focused via JS\n      if ($(goToId).attr(\"tabindex\") === undefined) {\n        $(goToId).attr('tabindex', '-1');\n      };\n      $(goToId).focus();\n    }\n  });\n\n  // When tabbing close the menu back up when reaching the end of the dropdown-menu\n  $(\".dropdown-list > button\").focus(function () {\n    $('.dropdown-list.show > button').attr('aria-expanded', 'false');\n    $('.dropdown-list.show').removeClass('show');\n  });\n  $(\".dropdown-list > button\").click(function (evt) {\n    e = evt || window.event;\n    toggleDropdownMenu(e.target.parentNode);\n  });\n  document.onkeydown = function (evt) {\n    e = evt || window.event;\n    if (e.key === ' ' || e.key === 'Spacebar' || e.key === 'Enter' || e.key === 'Escape') {\n      checkDropdownKey(e);\n    }\n  };\n});\n// END FUNCTION READY\n\n// Megamenu dropdown\n// Keys to successful implementation will be aria-expanded on the button \n// that triggers the submenu, and a keyboard model that includes support for \n// Escape, with focus returning to the button (top menu item) when the submenu closes. \nfunction hideDropdownMenu(el) {\n  el.classList.remove('show');\n  el.querySelector('button').setAttribute(\"aria-expanded\", 'false');\n}\nfunction toggleDropdownMenu(el) {\n  if (el.classList.contains('show')) {\n    hideDropdownMenu(el);\n  } else {\n    el.classList.add('show');\n    el.querySelector('button').setAttribute(\"aria-expanded\", 'true');\n  }\n}\nfunction checkDropdownKey(e) {\n  if (e.target.parentNode.classList.contains('dropdown-list')) {\n    if (e.key === ' ' || e.key === 'Spacebar' || e.key === 'Enter') {\n      e.preventDefault(); // prevent click function\n      toggleDropdownMenu(e.target.parentNode);\n    } else if (e.key === 'Tab') {\n      if (!e.target.parentNode.classList.contains('show')) {\n        hideDropdownMenu(e.target.parentNode);\n      }\n    }\n  } else if (e.key === 'Escape') {\n    var currentMenu = document.querySelector(\"#navbarCollapse\").querySelector('.dropdown-list.show');\n    hideDropdownMenu(currentMenu);\n    currentMenu.querySelector('button').focus();\n  }\n}\n// End Megamenu dropdown menu functions\n\n// function calcOverviewOffset() {\n//   //var sidebarOffset = $('#sidebar-nav').offset().top; // doesn't matter\n//   var contentHeaderOffset = $('.content-header').offset().top;\n//   return contentHeaderOffset + 50;\n// }\n\n// function setOverviewOffset(offset) {\n//   document.getElementById('sidebar-nav').setAttribute('style', \"top: -\" + offset + \"px\");\n//   return true;\n// }\n\n__webpack_require__(\"./node_modules/jquery-colorbox/jquery.colorbox.js\");\nvar twitterFetcher = __webpack_require__(\"./node_modules/twitter-fetcher/js/twitterFetcher_min.js\");\n\n// jquery-colorbox/jquery.colorbox-min.js\n\n// Start the namespace\nvar shoreline = {\n  scrollableOffset: 101,\n  colorBox: function colorBox() {\n    $('.video-lightbox').colorbox({\n      iframe: true,\n      width: \"80%\",\n      height: \"60%\",\n      maxWidth: \"1000\",\n      maxHeight: \"750\",\n      transition: 'none',\n      onOpen: function onOpen() {\n        $(\"body\").addClass('menu-open');\n      },\n      onClosed: function onClosed() {\n        $(\"body\").removeClass('menu-open');\n      }\n    });\n\n    $('.lightbox').colorbox({\n      maxWidth: \"95%\",\n      maxHeight: \"100%\",\n      transition: 'none',\n      rel: 'lightbox',\n      onOpen: function onOpen() {\n        $(\"body\").addClass('menu-open');\n      },\n      onClosed: function onClosed() {\n        $(\"body\").removeClass('menu-open');\n      }\n    });\n  },\n\n  // Pulls in JSON feed\n  // Requires full jQuery (not Slim)\n  getEventFeed: function getEventFeed() {\n    var max = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;\n\n    var arrayFeeds = [];\n\n    function getDateData(container) {\n      var eventStr = '';\n      arrayFeeds.forEach(function (feedContainer) {\n        $.ajax({\n          url: feedContainer.getAttribute('href'),\n          success: function success(data) {\n            var eventsSliced = data.slice(0, max);\n\n            // Print the calendar HTML for the whole feed (spliced)\n            printCal(eventsSliced, container);\n          }\n        });\n      });\n      // console.log(eventStr)\n      return eventStr;\n    }\n\n    function getTime(d) {\n      var hr = d.getHours();\n      var min = d.getMinutes();\n      if (min < 10) {\n        min = \"0\" + min;\n      }\n      var ampm = \"am\";\n      if (hr > 12) {\n        hr -= 12;\n        ampm = \"pm\";\n      }\n      return hr + \":\" + min + ampm;\n    }\n    // The printed layout of the HTML for the events\n    function printCal(data, container) {\n      var months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n      var showLocation = false;\n\n      data.forEach(function (dataEl) {\n        var timeStr = getTime(new Date(dataEl.startDateTime)) + \" - \" + getTime(new Date(dataEl.endDateTime));\n        if (timeStr === '0:00am - 0:00am') {\n          timeStr = \"All day\";\n        }\n\n        var locationStr = '';\n        if (showLocation) {\n          locationStr = '<span class=\"callocation\">' + dataEl.location + '</span>';\n        }\n\n        container.find('.row').append('<div class=\"col-md-4\"><div class=\"event\"><div class=\"event-date\"><div class=\"event-date-container\"><span class=\"month\">' + months[new Date(dataEl.startDateTime).getMonth()] + // Aug\n        '</span><span class=\"day\">' + new Date(dataEl.startDateTime).getDate() + // 22\n        '</span></div></div>\t<div class=\"event-content\"><h4>' + '<a href=\"' + dataEl.permaLinkUrl + '\">' + dataEl.title + '</a></h4>    <p><span class=\"caltime\">' + timeStr + '<br></span>' + locationStr + '</p>\t</div></div></div>');\n      });\n    }\n\n    // For each feed snippet on the page, get the data and print the calendar\n    $(\".ou-event-feed td a\").get().forEach(function (el) {\n      arrayFeeds.push(el);\n\n      var calFeedHolder = $(el).closest('.ou-event-feed');\n      calFeedHolder.html(\"<div class='row'></div>\");\n      getDateData(calFeedHolder);\n    });\n  },\n\n\n  changeScrollableOffset: function changeScrollableOffset(px) {\n    this.scrollableOffset = px;\n  }, // end mobileScrolltoTab\n  twitterFeed: function twitterFeed() {\n    // $('.twitter-feed').twittie({\n    //   dateFormat: '%b %d',\n    //   template: '<div class=\"date\">{{date}}</div> {{tweet}} ',\n    //   count: 6\n    // });\n\n    // setTimeout(function () {\n    //   $('.twitter-feed > ul > li').matchHeight();\n    // }, 2000);\n\n    var twitterConfig = {\n      \"profile\": { \"screenName\": 'shorelinecc' },\n      \"domId\": 'twitter-feed',\n      \"maxTweets\": 3,\n      \"enableLinks\": true,\n      \"showImages\": false,\n      \"showInteraction\": false,\n      \"showUser\": false\n    };\n    var twitterHtml = twitterFetcher.fetch(twitterConfig);\n    // console.log(twitterHtml)\n    // $('.twitter-feed').html = twitterHtml;\n  }, // twitterFeed\n  scrollAccordion: function scrollAccordion() {\n    // For reference only; minified version in main.js\n    var topScrollHeader = $('header').height(); // height of header when first loaded\n    var innerSectionHeight = 0;\n    var prevMoveTopOffset = 0;\n    var prevAccContent = 0;\n    var animateSpeed = 200;\n    var panel; // active accordion panel\n    var togglerHeight = 0;\n\n    function move(clickPos) {\n      var newPt = clickPos - togglerHeight - 40;\n      if (clickPos > topScrollHeader + innerSectionHeight) {\n        newPt = newPt - innerSectionHeight;\n      }\n      if (prevMoveTopOffset > clickPos - prevAccContent) {\n        // prevMoveTopOffset = newPt;\n        $('html,body').animate({\n          scrollTop: newPt\n        }, animateSpeed);\n        prevMoveTopOffset = newPt;\n      } else {\n        newPt = newPt - prevAccContent;\n        $('html,body').animate({\n          scrollTop: newPt\n        }, animateSpeed);\n        prevMoveTopOffset = newPt;\n      }\n    }\n\n    $(document).ready(function () {\n      $('.accordion .btn-toggle').on('mousedown', function (e) {\n        // if (panel) {\n        //   prevAccContent = panel.nextElementSibling.offsetHeight\n        // } else {\n        prevAccContent = 0;\n        // }\n        panel = e.target;\n      }).on('mouseup', function (e) {\n        if ($(e.target).hasClass('active')) {\n          togglerHeight = 0;\n          panel = undefined;\n          prevMoveTopOffset = 0;\n        } else {\n\n          togglerHeight = $(e.target).height();\n          var thisHeight = $(e.target).offset().top;\n          move(thisHeight);\n        }\n      });\n    });\n  },\n  loadNavChild: function loadNavChild() {\n    $(\"ul#subnav_parent > li\").each(function (index) {\n      if ($(this).children('a').attr(\"href\").toLowerCase().indexOf(ou_child.toLowerCase()) >= 0) {\n        var link = $(this).children('a').first().attr(\"href\");\n        //console.log(\"Match = \" + link);\n        $(this).append($(\"ul#subnav_child\")).addClass('current');\n        $(\"ul#subnav_child\").show();\n\n        var leftColHeight = $(\".left-nav\").height();\n        $(\".content\").css(\"minHeight\", leftColHeight + 40);\n      }\n    });\n  },\n  highlightActiveNav: function highlightActiveNav() {\n    // Current Page Link Highlighting\n    $(\".left-nav nav ul.nav a,.button-row a\").each(function (index) {\n      var currentPage = ou_path.toLowerCase().replace(ou_index, '');\n      var link = $(this).attr(\"href\").toLowerCase().replace(ou_index, '');\n      if (link == currentPage) {\n        $(this).parent('li').addClass(\"current\");\n      }\n    });\n  },\n  navTabs: function navTabs() {\n    $(document).ready(function () {\n      $('.nav-link').on('click', function (e) {\n        // chg all siblings to false\n        $(e.target).parent('li').siblings().find('a').attr('aria-selected', false);\n        $(e.target).attr('aria-selected', true);\n      });\n    });\n  },\n  unWrapDuplicateULs: function unWrapDuplicateULs() {\n    // remove duplicate <ul> in sidenav\n    $('.list-wrapper ul > ul').children().unwrap();\n  },\n  tableHTML: function tableHTML() {\n\n    // table js\n    var switched = false;\n    var updateTables = function updateTables() {\n      if ($(window).width() < 9999 && !switched) {\n        switched = true;$(\"table.responsive\").each(function (i, element) {\n          splitTable($(element));\n        });return true;\n      } else if (switched && $(window).width() > 9999) {\n        switched = false;$(\"table.responsive\").each(function (i, element) {\n          unsplitTable($(element));\n        });\n      }\n    };$(window).on('load', updateTables);$(window).bind(\"resize\", updateTables);function splitTable(original) {\n      original.wrap(\"<div class='table-wrapper' />\");var copy = original.clone();copy.find(\"td:not(:first-child), th:not(:first-child)\").css(\"display\", \"none\");copy.removeClass(\"responsive\");original.closest(\".table-wrapper\").append(copy);copy.wrap(\"<div class='pinned' />\");original.wrap(\"<div class='scrollable' />\");\n    }\n    function unsplitTable(original) {\n      original.closest(\".table-wrapper\").find(\".pinned\").remove();original.unwrap();original.unwrap();\n    }\n\n    // table-stacked js\n    $('.table-r1').each(function (e) {\n      var headerNames = [];\n      var rowTitles = [];\n      $(this).find('thead th').each(function (e, item) {\n        headerNames.push(item.innerText); // context causes errors, removed\n      });\n      $(this).find('tbody th').each(function (e, item) {\n        rowTitles.push(item.innerText); // context causes errors, removed\n      });\n      $(this).find('tbody tr').each(function (e) {\n        $(this).children('th').text(rowTitles[e]);\n        $(this).children('td').each(function (e) {\n          $(this).attr('data-title', headerNames[e + 1]);\n        });\n      });\n    });\n  },\n  twoColNav: function twoColNav() {\n    if ($(\".option-explore-nav\").length) {\n      // Adds class to first item in second column \n      var itemPos = Math.ceil($('.option-explore-nav .card-body ul li').length / 2);\n      $($('.option-explore-nav .card-body ul li')[itemPos]).addClass('list-top');\n    }\n  },\n  addBreadcrumbPosition: function addBreadcrumbPosition() {\n    // used for google structure data\n    $('.breadcrumb li').each(function (index) {\n      $(this).append('<meta property=\"position\" content=\"' + (index + 1) + '\" />');\n    });\n  },\n  runBootstrapTooltips: function runBootstrapTooltips() {\n    $('[data-toggle=\"tooltip\"]').tooltip();\n  },\n  contactListDynamicHours: function contactListDynamicHours() {\n    // Update to only expand the clicked hours\n    // Add slide?\n    function showTodayHours() {\n      var btn = '<button title=\"Expand to view all days\" type=\"button\" class=\"btn btn-link contact-hours-expand py-0 text-dark\"><span class=\"fas fa-caret-down\"></span><span class=\"sr-only\">Expand</span></button>';\n      daysInWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n      $('.contact-hours dt').hide();\n      $('.contact-hours dd').hide();\n      $('.contact-hours').attr('aria-expanded', 'false');\n      var d = new Date();\n      var n = d.getDay();\n      var today = 'contact-hours-' + daysInWeek[n];\n      $('dd.' + today).append(btn);\n      $('.' + today).show();\n    }\n    function showAllHours(dl) {\n      $(dl).attr('aria-expanded', 'true');\n      $(dl.find('dt').slideDown(300));\n      $(dl.find('dd').slideDown(300));\n    }\n    // ready\n    showTodayHours();\n    $(\".contact-hours-expand\").click(function () {\n      var el = $(this).parents('.contact-hours');\n      $(el.find(\".contact-hours-expand\")).hide();\n      showAllHours(el);\n    });\n    // end ready\n  }\n};\n\nshoreline.colorBox();\nif ($(\"#twitter-feed\").length) {\n  shoreline.twitterFeed();\n}\n// shoreline.scrollAccordion();\nshoreline.loadNavChild();\nshoreline.highlightActiveNav();\nshoreline.navTabs();\nshoreline.unWrapDuplicateULs();\nshoreline.tableHTML();\nshoreline.twoColNav();\nshoreline.addBreadcrumbPosition();\nshoreline.runBootstrapTooltips();\nshoreline.getEventFeed();\nif ($(\".contact-hours\").length) {\n  shoreline.contactListDynamicHours();\n}\n\n// @bootstrap-combobox/bootstrap-combobox\nif ($(\".dynamic-selectbox\").length) {\n  var bootstrapCombobox = __webpack_require__(\"./node_modules/@bootstrap-combobox/bootstrap-combobox/js/bootstrap-combobox.js\");\n  (function ($, bootstrapCombobox) {\n    $('.dynamic-selectbox').combobox({\n      bsVersion: '4',\n      appendId: 'Selector', // otherwise defaults to undefined\n      template: function template() {\n        return '<form class=\"combobox-container\"> <input class=\"link-redirect\" type=\"hidden\" /><div class=\"input-group\"> <input class=\"dropdown-toggle\" type=\"text\" autocomplete=\"off\" data-dropdown=\"dropdown\" /><button class=\"input-group-append input-group-text dropdown-toggle\" data-dropdown=\"dropdown\"><span class=\"sr-only\">Expand list</span></button></div></form>';\n      },\n      menu: '<ul class=\"typeahead typeahead-long dropdown-menu card-links card-links-compact\" style=\"display: none;\"></ul>',\n      item: '<li class=\"px-3\"><a href=\"#\"></a></li>'\n    });\n\n    $(\".combobox-container button\").click(function (event) {\n      event.preventDefault();\n    });\n    $(\".link-redirect\").change(function () {\n      if (this.value) window.location.href = this.value;\n    });\n  })(jQuery, bootstrapCombobox);\n}\n\n// Detect breakpoint ResponsiveBootstrapToolkit\nvar ResponsiveBootstrapToolkit = __webpack_require__(\"./node_modules/responsive-toolkit/src/bootstrap-toolkit.js\");\n(function ($, viewport) {\n\n  var visibilityDivs = {\n    'xs': $('<div class=\"d-xs-block d-sm-none d-md-none d-lg-none d-xl-none\"></div>'),\n    'sm': $('<div class=\"d-none d-sm-block d-md-none d-lg-none d-xl-none\"></div>'),\n    'md': $('<div class=\"d-none d-md-block d-sm-none d-lg-none d-xl-none\"></div>'),\n    'lg': $('<div class=\"d-none d-lg-block d-sm-none d-md-none d-xl-none\"></div>'),\n    'xl': $('<div class=\"d-none d-xl-block d-sm-none d-md-none d-lg-none\"></div>')\n  };\n\n  viewport.use('custom', visibilityDivs);\n\n  var showBreakpoint = function showBreakpoint() {}\n  // console.log('Current breakpoint: ', viewport.current());\n\n\n  // on resize\n  ;$(window).resize(viewport.changed(function () {\n    // showBreakpoint();\n\n    if (viewport.is('>=md')) {\n      shoreline.changeScrollableOffset(40);\n    } else {\n      shoreline.changeScrollableOffset(101);\n    }\n  })).resize();\n})(jQuery, ResponsiveBootstrapToolkit);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./source/_assets/js/main.js\n");

/***/ }),

/***/ "./source/_assets/sass/main.scss":
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvX2Fzc2V0cy9zYXNzL21haW4uc2Nzcz84NzU1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ii4vc291cmNlL19hc3NldHMvc2Fzcy9tYWluLnNjc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc291cmNlL19hc3NldHMvc2Fzcy9tYWluLnNjc3Ncbi8vIG1vZHVsZSBpZCA9IC4vc291cmNlL19hc3NldHMvc2Fzcy9tYWluLnNjc3Ncbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./source/_assets/sass/main.scss\n");

/***/ }),

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("./source/_assets/js/main.js");
module.exports = __webpack_require__("./source/_assets/sass/main.scss");


/***/ })

/******/ });